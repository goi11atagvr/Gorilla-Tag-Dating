<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>GorillaMatch ü¶çüçå</title>
  <style>
    :root {
      --bg: #0b1220;
      --card: #121a2b;
      --accent: #7cfc00;
      --accent-2: #ffdd57;
      --danger: #ff4d4d;
      --muted: #9aa4b2;
      --text: #e6eefc;
    }
    * { box-sizing: border-box; }
    html, body { height: 100%; }
    body {
      margin: 0;
      font-family: system-ui, -apple-system, Segoe UI, Roboto, Inter, Ubuntu, Cantarell, "Helvetica Neue", Arial, "Noto Sans", "Apple Color Emoji", "Segoe UI Emoji";
      color: var(--text);
      background: radial-gradient(1200px 800px at 100% -10%, #14213a 0%, var(--bg) 60%);
      overflow-x: hidden;
    }

    .app { max-width: 960px; margin: 0 auto; padding: 24px; }
    header {
      display: flex; align-items: center; justify-content: space-between; gap: 12px; margin-bottom: 16px;
    }
    .brand { display: flex; align-items: center; gap: 12px; }
    .logo { width: 42px; height: 42px; border-radius: 14px; background: linear-gradient(135deg, #2b3a59, #101625); display: grid; place-items: center; box-shadow: 0 8px 30px rgba(0,0,0,.35), inset 0 0 0 2px #23314d; }
    .logo span { font-size: 24px; }
    h1 { font-size: 20px; margin: 0; letter-spacing: .2px; }
    .pill { padding: 6px 10px; border-radius: 999px; background: #0e1526; color: var(--muted); font-size: 12px; border: 1px solid #1a2338; }

    .stage { position: relative; height: min(76vh, 620px); margin: 16px 0 8px; }
    .card {
      position: absolute; inset: 0; margin: auto; width: min(560px, 92vw); height: 100%;
      background: linear-gradient(180deg, #17233b, #0f172a); border-radius: 28px;
      box-shadow: 0 30px 50px rgba(0,0,0,.45), 0 8px 20px rgba(0,0,0,.35);
      border: 1px solid #1b2540; overflow: hidden; user-select: none; touch-action: none;
      transform-origin: 50% 100%;
    }
    .card.hidden { display: none; }

    .banner { position: relative; height: 56%; background: radial-gradient(100% 120% at 50% 0%, #1f2d4d 0%, #0f172a 80%); }
    .pfp {
      position: absolute; left: 16px; bottom: -42px; width: 96px; height: 96px; border-radius: 24px; background: #0d1426; border: 2px solid #223154; display: grid; place-items: center;
      box-shadow: 0 14px 40px rgba(0,0,0,.5);
    }
    .pfp svg { width: 70px; height: 70px; }

    .badge { position: absolute; right: 14px; top: 14px; padding: 8px 12px; border-radius: 12px; font-weight: 600; letter-spacing: .3px; border: 1px solid; backdrop-filter: blur(6px); }
    .badge.like { color: #1b4; border-color: rgba(40,200,120,.4); background: rgba(20,40,28,.25); }
    .badge.nope { color: #f66; border-color: rgba(255,110,110,.4); background: rgba(40,20,20,.25); }
    .badge.super { color: #7cc5ff; border-color: rgba(124,197,255,.4); background: rgba(20,30,45,.25); }

    .content { position: absolute; inset: 52% 16px 16px 16px; display: grid; grid-template-rows: auto 1fr; gap: 8px; }
    .name-row { display: flex; align-items: baseline; gap: 8px; }
    .name { font-size: 22px; font-weight: 800; }
    .meter {
      height: 10px; border-radius: 8px; background: #0b1120; border: 1px solid #1a2540; overflow: hidden;
    }
    .meter > span { display: block; height: 100%; background: linear-gradient(90deg, var(--accent-2), #ffd000, #ffa600); width: 0; }

    .tags { display: grid; grid-template-columns: repeat(2, minmax(0,1fr)); gap: 8px; margin-top: 6px; }
    .tag { display: flex; gap: 8px; align-items: center; padding: 10px 12px; border-radius: 12px; background: #0e1526; border: 1px solid #1a2338; color: #d6e1f5; }
    .tag small { color: var(--muted); display: block; margin-top: 2px; }

    .buttons { display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 14px; margin: 14px auto 0; width: min(540px, 92vw); }
    .btn {
      padding: 16px; border-radius: 999px; border: 1px solid #1a2338; background: #0f172a; color: var(--text);
      font-size: 18px; cursor: pointer; box-shadow: 0 12px 25px rgba(0,0,0,.25); transition: transform .08s ease, background .2s;
    }
    .btn:hover { transform: translateY(-1px); }
    .btn:active { transform: translateY(1px) scale(0.98); }
    .btn.nope { color: #ff9a9a; }
    .btn.super { color: #9ad4ff; }
    .btn.like { color: #92f7c8; }

    .footer { display: flex; justify-content: space-between; align-items: center; margin-top: 10px; color: var(--muted); font-size: 12px; }

    .toast { position: fixed; left: 50%; transform: translateX(-50%); bottom: 18px; background: #0e1526; color: var(--text); padding: 10px 14px; border-radius: 12px; border: 1px solid #1a2338; box-shadow: 0 10px 20px rgba(0,0,0,.3); display: none; }

    .modal-backdrop { position: fixed; inset: 0; background: rgba(5,8,15,.6); display: none; place-items: center; }
    .modal { width: min(560px, 92vw); background: #0f172a; border: 1px solid #1a2338; border-radius: 20px; padding: 16px; box-shadow: 0 30px 60px rgba(0,0,0,.45); }
    .modal h3 { margin: 0 0 8px; }
    .match-row { display: flex; align-items: center; gap: 12px; margin: 12px 0; }
    .match-pill { padding: 6px 10px; border-radius: 999px; background: #0e1526; border: 1px solid #1a2338; }

    .chatbox { display: grid; grid-template-rows: 1fr auto; gap: 8px; height: 300px; border: 1px solid #1a2338; border-radius: 14px; padding: 8px; background: #0b1220; }
    .msgs { overflow-y: auto; display: flex; flex-direction: column; gap: 6px; }
    .msg { max-width: 80%; padding: 8px 10px; border-radius: 12px; background: #0e1526; border: 1px solid #1a2338; }
    .msg.me { align-self: flex-end; background: #15213b; }

    .sr-only { position: absolute; width: 1px; height: 1px; padding: 0; margin: -1px; overflow: hidden; clip: rect(0,0,0,0); white-space: nowrap; border: 0; }
  </style>
</head>
<body>
  <div class="app">
    <header>
      <div class="brand">
        <div class="logo" aria-hidden="true"><span>ü¶ç</span></div>
        <div>
          <h1>GorillaMatch</h1>
          <div class="pill">Tag your soulmate ¬∑ parody</div>
        </div>
      </div>
      <div>
        <button class="pill" id="viewMatchesBtn">Matches (<span id="matchCount">0</span>)</button>
      </div>
    </header>

    <div class="stage" id="stage">
      <!-- Cards are injected here -->
    </div>

    <div class="buttons">
      <button class="btn nope" id="btnNope" aria-label="Nope">‚ùå Not my troop</button>
      <button class="btn super" id="btnSuper" aria-label="Super Like">üíô Banana Bomb</button>
      <button class="btn like" id="btnLike" aria-label="Like">‚úÖ Tagged in my heart</button>
    </div>

    <div class="footer">
      <div>Tip: drag cards left/right (up for super).</div>
      <div><span id="profileLeft">0</span> profiles left</div>
    </div>
  </div>

  <div class="toast" id="toast"></div>

  <div class="modal-backdrop" id="matchesModal" aria-hidden="true">
    <div class="modal" role="dialog" aria-modal="true">
      <h3>ü´Ç Your Matches</h3>
      <div id="matchesList"></div>
      <div class="match-row">
        <span class="match-pill" id="chatStatus">üîí Chat locked ¬∑ get 3 matches to unlock</span>
      </div>
      <div class="chatbox" id="chatBox" hidden>
        <div class="msgs" id="msgs"></div>
        <form id="chatForm">
          <label class="sr-only" for="chatInput">Message</label>
          <input id="chatInput" type="text" placeholder="Type a message‚Ä¶" style="width: 80%; padding: 10px; border-radius: 10px; border: 1px solid #1a2338; background:#0e1526; color:var(--text)">
          <button class="btn" type="submit">Send</button>
        </form>
      </div>
      <div style="text-align:right; margin-top:12px">
        <button class="pill" id="closeMatchesBtn">Close</button>
      </div>
    </div>
  </div>

  <script>
    // --- Fake data ---
    const TAG_STYLES = ["Sweaty wall climber","Casual tree camper","Speedrunner","Branch juker","Vertical enjoyer","Lucio runner"];
    const MAPS = ["Forest","Caves","Mountains","Canyon","Clouds","Lava"];
    const COSMETICS = ["Party Hat","Gorilla Glasses","Top Hat","Cowboy Hat","Pot Head","Police Cap","Guitar"];

    function randomItem(a){ return a[Math.floor(Math.random()*a.length)] }

    function makeProfile(id){
      const names = [
        "BananaBilly","TreeTrixie","WallWaffle","JukeJasper","LavaLuna","CloudyKai","SpeedyMomo","BranchBea","CanyonCam","ForestFizz","LucioLee","MapMika","TurboTaj","TopHatTia","GoofyGus","PranksterPip","ZoomZara","BounceBo","TagTora","LeapLex"
      ];
      const name = names[id % names.length] + (Math.random()<.35 ? Math.floor(10+Math.random()*89) : "");
      return {
        id: Date.now() + '-' + id + '-' + Math.floor(Math.random()*1000),
        name,
        banana: Math.floor(30 + Math.random()*70),
        style: randomItem(TAG_STYLES),
        map: randomItem(MAPS),
        cosmetic: randomItem(COSMETICS),
        likesYou: Math.random() < 0.55, // chance they like you back
      };
    }

    function seedProfiles(n=12){
      return Array.from({length:n}, (_,i)=> makeProfile(i+1+Math.floor(Math.random()*1000)));
    }

    // --- State ---
    const store = {
      get(key, fallback){ try { const v = localStorage.getItem(key); return v ? JSON.parse(v) : fallback } catch { return fallback } },
      set(key, val){ localStorage.setItem(key, JSON.stringify(val)); }
    };

    let queue = store.get('gm_queue', null) || seedProfiles(16);
    let likes = store.get('gm_likes', []);
    let passes = store.get('gm_passes', []);
    let matches = store.get('gm_matches', []);
    let chatUnlocked = store.get('gm_chatUnlocked', false);

    const stage = document.getElementById('stage');
    const profileLeftEl = document.getElementById('profileLeft');
    const matchCountEl = document.getElementById('matchCount');

    function updateCounters(){
      profileLeftEl.textContent = queue.length;
      matchCountEl.textContent = matches.length;
      const chatStatus = document.getElementById('chatStatus');
      const chatBox = document.getElementById('chatBox');
      chatUnlocked = chatUnlocked || matches.length >= 3;
      store.set('gm_chatUnlocked', chatUnlocked);
      if(chatUnlocked){
        chatStatus.textContent = '‚úÖ Chat unlocked ¬∑ be nice!';
        chatBox.hidden = false;
      } else {
        chatStatus.textContent = 'üîí Chat locked ¬∑ get 3 matches to unlock';
        chatBox.hidden = true;
      }
    }

    function toast(msg){
      const el = document.getElementById('toast');
      el.textContent = msg;
      el.style.display = 'block';
      setTimeout(()=>{ el.style.display = 'none'; }, 1400);
    }

    // Render stacked cards (up to 5)
    function renderTopCard(){
      stage.innerHTML = '';
      if(queue.length === 0){
        const empty = document.createElement('div');
        empty.className = 'card';
        empty.innerHTML = `<div class="banner"></div><div class="content"><div style="text-align:center; margin-top:40px">No more profiles. Come back later!<br><button class="pill" id="reloadBtn" style="margin-top:10px">Reload demo profiles</button></div></div>`;
        stage.appendChild(empty);
        document.getElementById('reloadBtn').addEventListener('click', reloadMore);
        updateCounters();
        return;
      }

      const maxShow = Math.min(5, queue.length);
      for(let i = maxShow - 1; i >= 0; i--){
        const p = queue[i];
        const card = document.createElement('div');
        card.className = 'card';
        card.style.zIndex = 100 + i;
        const offsetY = i * 8;
        const scale = 1 - i * 0.02;
        card.style.transform = `translateY(${offsetY}px) scale(${scale})`;
        card.setAttribute('data-index', i);
        card.innerHTML = `
          <div class="banner">
            <div class="pfp" aria-hidden="true">${gorillaSVG()}</div>
            <div class="badge like" id="badgeLike" style="opacity:0">LIKE</div>
            <div class="badge nope" id="badgeNope" style="opacity:0">NOPE</div>
            <div class="badge super" id="badgeSuper" style="opacity:0">SUPER</div>
          </div>
          <div class="content">
            <div>
              <div class="name-row"><span class="name">${p.name}</span><span class="pill">${p.style}</span></div>
              <div class="meter" aria-label="banana-meter" title="Banana Preference">
                <span id="bananaFill" style="width:${p.banana}%"></span>
              </div>
            </div>
            <div>
              <div class="tags">
                <div class="tag">üåç <div><b>Map Vibes</b><small>${p.map}</small></div></div>
                <div class="tag">üé© <div><b>Favorite Cosmetic</b><small>${p.cosmetic}</small></div></div>
                <div class="tag">üçå <div><b>Banana Meter</b><small>${p.banana}%</small></div></div>
                <div class="tag">üïπÔ∏è <div><b>Tag Style</b><small>${p.style}</small></div></div>
              </div>
            </div>
          </div>`;

        // Only the top card is interactive
        if(i === 0) bindDrag(card);
        stage.appendChild(card);
      }

      updateCounters();
    }

    function gorillaSVG(){
      return `<svg viewBox="0 0 64 64" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M20 34c0-8 6-14 12-14s12 6 12 14v6H20v-6z" fill="#2d3b57"/>
        <circle cx="32" cy="20" r="10" fill="#3b4a6c"/>
        <rect x="16" y="36" width="32" height="14" rx="7" fill="#2a3853"/>
        <circle cx="26" cy="18" r="2" fill="#fff"/><circle cx="38" cy="18" r="2" fill="#fff"/>
        <path d="M26 26c2 2 10 2 12 0" stroke="#a7b4d0" stroke-width="2" stroke-linecap="round"/>
      </svg>`
    }

    // central decision handler (works on queue[0]) with safe animation
    function animateTop(action){
      const topCard = stage.querySelector('.card[data-index="0"]');
      if(!topCard){
        // no card (maybe empty state)
        decision(action);
        return;
      }
      if(action === 'like'){
        topCard.style.transition = 'transform .25s ease';
        topCard.style.transform = `translate(120vw,0) rotate(24deg)`;
        setTimeout(()=>decision('like'), 220);
      } else if(action === 'nope'){
        topCard.style.transition = 'transform .25s ease';
        topCard.style.transform = `translate(-120vw,0) rotate(-24deg)`;
        setTimeout(()=>decision('nope'), 220);
      } else if(action === 'super'){
        topCard.style.transition = 'transform .25s ease';
        topCard.style.transform = `translate(0,-120vh) rotate(0)`;
        setTimeout(()=>decision('super'), 220);
      }
    }

    function decision(action){
      const p = queue.shift();
      if(!p) return;
      if(action === 'like' || action === 'super'){
        likes.push(p);
        if(p.likesYou){
          matches.push(p);
          toast(`üéâ Match with ${p.name}!`);
          if('vibrate' in navigator) { try { navigator.vibrate([40,60,40]); } catch{} }
        } else {
          toast(`‚úÖ You liked ${p.name}`);
        }
      } else {
        passes.push(p);
        toast(`üëã Passed on ${p.name}`);
      }
      persist();
      renderTopCard();
    }

    function persist(){
      store.set('gm_queue', queue);
      store.set('gm_likes', likes);
      store.set('gm_passes', passes);
      store.set('gm_matches', matches);
      updateCounters();
    }

    function reloadMore(){
      queue = seedProfiles(16);
      persist();
      renderTopCard();
    }

    // --- Drag/swipe handling ---
    function bindDrag(card){
      let startX=0, startY=0, x=0, y=0, dragging=false;
      const like = card.querySelector('#badgeLike');
      const nope = card.querySelector('#badgeNope');
      const sup = card.querySelector('#badgeSuper');

      function onDown(e){
        dragging = true; const p = point(e); startX = p.x; startY = p.y; x = 0; y = 0; card.style.transition = 'none';
      }
      function onMove(e){
        if(!dragging) return; const p = point(e); x = p.x - startX; y = p.y - startY;
        const rot = x / 18; const scale = 1;
        card.style.transform = `translate(${x}px, ${y}px) rotate(${rot}deg) scale(${scale})`;
        const dx = Math.min(1, Math.abs(x)/160);
        like.style.opacity = x>0 ? dx : 0; nope.style.opacity = x<0 ? dx : 0; sup.style.opacity = y<-40 ? Math.min(1, (-y)/160) : 0;
      }
      function onUp(){
        if(!dragging) return; dragging=false; card.style.transition = 'transform .25s ease';
        const threshold = 140; const superT = -120;
        if(x > threshold){ card.style.transform = `translate(120vw, ${y}px) rotate(24deg)`; setTimeout(()=>decision('like'), 160); return; }
        if(x < -threshold){ card.style.transform = `translate(-120vw, ${y}px) rotate(-24deg)`; setTimeout(()=>decision('nope'), 160); return; }
        if(y < superT){ card.style.transform = `translate(${x}px, -120vh) rotate(0)`; setTimeout(()=>decision('super'), 160); return; }
        card.style.transform = ``;
        like.style.opacity = 0; nope.style.opacity = 0; sup.style.opacity = 0;
      }

      function point(e){
        if(e.touches && e.touches[0]) return { x: e.touches[0].clientX, y: e.touches[0].clientY };
        return { x: e.clientX, y: e.clientY };
      }

      card.addEventListener('mousedown', onDown);
      window.addEventListener('mousemove', onMove);
      window.addEventListener('mouseup', onUp);
      card.addEventListener('touchstart', onDown, {passive:true});
      card.addEventListener('touchmove', onMove, {passive:true});
      card.addEventListener('touchend', onUp);

      // buttons call central animator
      document.getElementById('btnNope').onclick = ()=>{ animateTop('nope'); };
      document.getElementById('btnLike').onclick = ()=>{ animateTop('like'); };
      document.getElementById('btnSuper').onclick = ()=>{ animateTop('super'); };
    }

    // Matches modal & chat
    const matchesModal = document.getElementById('matchesModal');
    const matchesList = document.getElementById('matchesList');
    const closeMatchesBtn = document.getElementById('closeMatchesBtn');

    document.getElementById('viewMatchesBtn').addEventListener('click', ()=>{
      openMatches();
    });

    closeMatchesBtn.addEventListener('click', closeMatches);

    // click backdrop to close (but not when clicking inside modal)
    matchesModal.addEventListener('click', (e)=>{
      if(e.target === matchesModal) closeMatches();
    });

    function openMatches(){
      renderMatches();
      matchesModal.style.display = 'grid';
      matchesModal.setAttribute('aria-hidden', 'false');
      updateCounters();
    }
    function closeMatches(){ matchesModal.style.display = 'none'; matchesModal.setAttribute('aria-hidden', 'true'); }
    window.closeMatches = closeMatches;

    function renderMatches(){
      matchesList.innerHTML = '';
      if(matches.length === 0){
        matchesList.innerHTML = '<div class="pill">No matches yet. Like some profiles!</div>';
        return;
      }
      for(const m of matches){
        const row = document.createElement('div');
        row.className = 'match-row';
        row.innerHTML = `<div class="pfp" style="width:48px;height:48px; border-radius:12px">${gorillaSVG()}</div>
          <div>
            <div><b>${m.name}</b> ¬∑ <span class="pill">${m.map}</span></div>
            <small class="muted">${m.style} ¬∑ üçå ${m.banana}%</small>
          </div>`;
        matchesList.appendChild(row);
      }
    }

    // Simple goofy chat (global)
    const msgsEl = document.getElementById('msgs');
    const chatForm = document.getElementById('chatForm');
    const chatInput = document.getElementById('chatInput');

    chatForm.addEventListener('submit', (e)=>{
      e.preventDefault();
      const text = chatInput.value.trim();
      if(!text) return;
      addMsg(text, true);
      chatInput.value='';
      // bot reply
      setTimeout(()=>{
        const reply = chatUnlocked ? botReply(text) : gruntify(text);
        addMsg(reply, false);
      }, 350);
    });

    function addMsg(text, mine){
      const div = document.createElement('div');
      div.className = 'msg' + (mine ? ' me' : '');
      div.textContent = text;
      msgsEl.appendChild(div);
      msgsEl.scrollTop = msgsEl.scrollHeight;
    }

    function gruntify(text){
      // turn any message into goofy gorilla grunts
      const chunks = Math.max(1, Math.min(8, Math.round(text.length/6)));
      let out = [];
      for(let i=0;i<chunks;i++) out.push(["ooh","ooh","aah","aah","ehh","ook","uk"][Math.floor(Math.random()*7)]);
      return out.join(' ');
    }

    function botReply(text){
      const canned = [
        "Let's tag later in Forest?",
        "Wall run race? Loser buys bananas.",
        "Branch routes or lava jukes?",
        "Your banana meter is impressive.",
        "Party hat squad assemble!",
        "GGs!" 
      ];
      if(/banana/i.test(text)) return "üçå Banana supremacy!";
      if(/forest|map|mountain|canyon|caves|cloud/i.test(text)) return "I love that map too!";
      return randomItem(canned);
    }

    // Init
    renderTopCard();
    updateCounters();
  </script>
</body>
</html>
